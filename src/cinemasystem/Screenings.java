package cinemasystem;

import java.awt.Window;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

import CinemaClasses.Film;
import CinemaClasses.JTextFieldLimit;
import CinemaClasses.Screening;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.Font;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import java.awt.Color;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author christophermclaughlin
 */
public class Screenings extends javax.swing.JFrame {
      
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    private final String USER_NAME = "root";
	private final String PASSWORD = "password";
    Connection conn;
    Statement st;
    ResultSet rs;
    int hoursSize = 0;
    int minSize = 0;
    int num = 101;
    Boolean test = false;
    
  
    /**
     * Creates new form Screenings
     */
    public Screenings() {
    	getContentPane().setBackground(new Color(0, 204, 204));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel1.setForeground(Color.RED);
        jLabel1.setBackground(Color.RED);
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setForeground(Color.RED);
        jLabel3 = new javax.swing.JLabel();
        jLabel3.setForeground(Color.RED);
        jLabel3.setBackground(Color.RED);
        jLabel4 = new javax.swing.JLabel();
        jLabel4.setForeground(Color.RED);
        jLabel5 = new javax.swing.JLabel();
        jLabel5.setForeground(Color.RED);
        jLabel6 = new javax.swing.JLabel();
        jLabel6.setForeground(Color.RED);
        theatreComboBox = new javax.swing.JComboBox<>();
        filmComboBox = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        saveButton = new javax.swing.JButton();
        saveButton.setBackground(new Color(102, 204, 0));
        cancelButton = new javax.swing.JButton();
        cancelButton.setBackground(new Color(204, 51, 51));
        screeningNumTf = new javax.swing.JTextField();
        hours = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new Font("American Typewriter", Font.BOLD, 50)); // NOI18N
        jLabel1.setText("Screening");

        jLabel2.setFont(new Font("Lucida Grande", Font.BOLD, 32)); // NOI18N
        jLabel2.setText("Screening Number:");

        jLabel3.setFont(new Font("Lucida Grande", Font.BOLD, 32)); // NOI18N
        jLabel3.setText("Theatre Number:");

        jLabel4.setFont(new Font("Lucida Grande", Font.BOLD, 32)); // NOI18N
        jLabel4.setText("Date:");

        jLabel5.setFont(new Font("Lucida Grande", Font.BOLD, 32)); // NOI18N
        jLabel5.setText("Time:");

        jLabel6.setFont(new Font("Lucida Grande", Font.BOLD, 32)); // NOI18N
        jLabel6.setText("Film Name:");
        jLabel6.setToolTipText("");

        theatreComboBox.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        theatreComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Theatre" }));
        try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cinema?autoReconnect=true&useSSL=false", USER_NAME, PASSWORD);
			st = conn.createStatement();
			String s = "Select Theatre_Num from theatre";
			rs = st.executeQuery(s);
			while(rs.next()) {
				theatreComboBox.addItem(rs.getString(1));
			}
		}
		catch (Exception b) {
		JOptionPane.showMessageDialog(null,  "Error");
		}finally {
			try {
				st.close();
				rs.close();
				conn.close();
				
			}catch(Exception b) {
	    		JOptionPane.showMessageDialog(null,  "Error Close");

			}
		}

        filmComboBox.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        filmComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Film" }));
        try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cinema?autoReconnect=true&useSSL=false", USER_NAME, PASSWORD);
			st = conn.createStatement();
			String s = "Select Name from film";
			rs = st.executeQuery(s);
			while(rs.next()) {
				filmComboBox.addItem(rs.getString(1));
			}
		}
		catch (Exception b) {
		JOptionPane.showMessageDialog(null,  "Error");
		}finally {
			try {
				st.close();
				rs.close();
				conn.close();
				
			}catch(Exception b) {
	    		JOptionPane.showMessageDialog(null,  "Error Close");

			}
		}

        jDateChooser1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        Date currentDate= new Date();
        jDateChooser1.setMinSelectableDate(currentDate);
        Calendar c = Calendar.getInstance();
        c.setTime(currentDate);
        c.add(Calendar.MONTH, 2);
        Date newDate = c.getTime();
        jDateChooser1.setMaxSelectableDate(newDate);

        
        saveButton.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        screeningNumTf.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        screeningNumTf.setForeground(new java.awt.Color(204, 204, 204));
        screeningNumTf.setDocument(new JTextFieldLimit(6));      
        setNum();
        screeningNumTf.setText(""+num);
        screeningNumTf.setEditable(false);

        screeningNumTf.addFocusListener(new FocusListener() {
        	public void focusGained(FocusEvent e) {
        		screeningNumTffocusGained(e);
        
        	}

			@Override
			public void focusLost(FocusEvent e) {
				screeningNumTffocusLost(e);
				
			}
        });
        
        screeningNumTf.addKeyListener(new KeyListener() {
        	public void keyTyped(KeyEvent e) {
        		screeningNumTfkeyTyped(e);
        	}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
        });
        
        hours.setFont(new java.awt.Font("Lucida Grande", 0, 32)); // NOI18N
        hours.setForeground(new java.awt.Color(204, 204, 204));
        hours.setDocument(new JTextFieldLimit(2));
        hours.setText("--");
        
        hours.addFocusListener(new FocusListener() {
        	public void focusGained(FocusEvent e) {
        		hoursfocusGained(e);
        
        	}

			@Override
			public void focusLost(FocusEvent e) {
				hoursfocusLost(e);
				
			}
        });
        
        hours.addKeyListener(new KeyListener() {
        	public void keyTyped(KeyEvent e) {
        		hourskeyTyped(e);
        	}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
        });

        
        JLabel lblNewLabel = new JLabel("Screen Days:");
        lblNewLabel.setForeground(Color.RED);
        lblNewLabel.setFont(new Font("Lucida Grande", Font.BOLD, 32));
        
        JComboBox comboBox = new JComboBox();
        comboBox.setModel(new DefaultComboBoxModel(new String[] {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"}));
        comboBox.setFont(new Font("Lucida Grande", Font.PLAIN, 32));
        
        JLabel lblMinutes = new JLabel();
        lblMinutes.setText("Minutes:");
        lblMinutes.setForeground(Color.RED);
        lblMinutes.setFont(new Font("Dialog", Font.BOLD, 32));
        
        lblHour = new JLabel();
        lblHour.setText("Hour:");
        lblHour.setForeground(Color.RED);
        lblHour.setFont(new Font("Dialog", Font.BOLD, 32));
        
        min = new JTextField();
        min.setDocument(new JTextFieldLimit(2));
        min.setText("--");
        min.setForeground(new Color(204, 204, 204));
        min.setFont(new Font("Dialog", Font.PLAIN, 32));
        
        min.addFocusListener(new FocusListener() {
        	public void focusGained(FocusEvent e) {
        		minfocusGained(e);
        
        	}

			@Override
			public void focusLost(FocusEvent e) {
				minfocusLost(e);
				
			}
        });
        
        min.addKeyListener(new KeyListener() {
        	public void keyTyped(KeyEvent e) {
        		minkeyTyped(e);
        	}

			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(150)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addGroup(layout.createSequentialGroup()
        							.addComponent(cancelButton, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED, 581, Short.MAX_VALUE)
        							.addComponent(saveButton, GroupLayout.PREFERRED_SIZE, 157, GroupLayout.PREFERRED_SIZE))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel2)
        								.addComponent(jLabel3)
        								.addComponent(jLabel6)
        								.addComponent(jLabel4)
        								.addComponent(jLabel5)
        								.addComponent(lblNewLabel))
        							.addGap(18)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        								.addGroup(layout.createParallelGroup(Alignment.LEADING)
        									.addComponent(filmComboBox, 0, 584, Short.MAX_VALUE)
        									.addComponent(theatreComboBox, 0, 584, Short.MAX_VALUE)
        									.addComponent(screeningNumTf, GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
        									.addGroup(layout.createSequentialGroup()
        										.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        											.addComponent(jDateChooser1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        											.addGroup(layout.createSequentialGroup()
        												.addPreferredGap(ComponentPlacement.RELATED)
        												.addComponent(lblHour, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE)
        												.addPreferredGap(ComponentPlacement.RELATED)
        												.addComponent(hours, GroupLayout.PREFERRED_SIZE, 139, GroupLayout.PREFERRED_SIZE)))
        										.addPreferredGap(ComponentPlacement.UNRELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        										.addComponent(lblMinutes, GroupLayout.PREFERRED_SIZE, 147, GroupLayout.PREFERRED_SIZE)
        										.addPreferredGap(ComponentPlacement.UNRELATED)
        										.addComponent(min, GroupLayout.PREFERRED_SIZE, 180, GroupLayout.PREFERRED_SIZE)
        										.addGap(8)))))))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(489)
        					.addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 258, GroupLayout.PREFERRED_SIZE)))
        			.addGap(221))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(30)
        			.addComponent(jLabel1)
        			.addGap(51)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(screeningNumTf, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel3)
        				.addComponent(theatreComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jDateChooser1, GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
        				.addComponent(jLabel4, Alignment.TRAILING))
        			.addGap(30, 30, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel5)
        				.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        					.addComponent(hours, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addComponent(lblMinutes, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
        					.addComponent(lblHour, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
        					.addComponent(min, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel6)
        				.addComponent(filmComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(32)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblNewLabel)
        				.addComponent(comboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(74)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(cancelButton)
        				.addComponent(saveButton))
        			.addGap(33))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String selectedDate = df.format(jDateChooser1.getDate()) ;
        Boolean check = false;
        Date isDateEmpty = jDateChooser1.getDate();
        int timeHr =0, timeMin = 0;
        String hoursString = hours.getText();
        String minString = min.getText();
        String filmName=(String)filmComboBox.getSelectedItem();
        String theatreSelected=(String)theatreComboBox.getSelectedItem();
        String numOfDaysString=(String)filmComboBox.getSelectedItem();
        int theatre = Integer.parseInt(theatreSelected);   
        
        if(hoursString.equals("--") || minString.equals("--"))
        {
        	
        }
        else
        {
             timeHr = Integer.parseInt(hours.getText());
             timeMin = Integer.parseInt(min.getText());
            
        }
        
        Boolean timeCheck = isTimeFree(timeHr, timeMin, filmName, theatre, selectedDate);

        if(theatreSelected.equals("Select Theatre")) {
			JOptionPane.showMessageDialog(null,  "Select a Theatre to host the screening");
        	
        }
        else if(isDateEmpty == null)
        {
			JOptionPane.showMessageDialog(null,  "Select a vaild Date");
        }
        else if(hoursSize < 1 || minSize < 1 || hoursString.equals("--") || minString.equals("--")) {
        	
			JOptionPane.showMessageDialog(null,  "Select a vaild Time in the following format\n00:00");

        }
        else if(filmName.equals("Select Film")) {
         
			JOptionPane.showMessageDialog(null,  "Select a film for the screening");

       }
        else if(timeCheck == false) {
			JOptionPane.showMessageDialog(null,  "INVAILD TIME\nA screening is already scheduled in that theatre\n that colides with the selected time");

        }
        else
        {
        	
        	String time = timeHr + "." + timeMin;
        	int theatre1 = Integer.parseInt(theatreSelected);
        	Screening newScreening = new Screening(num, theatre1, filmName, selectedDate, time);
	   		newScreening.addScreeningToDB();
	   		setNum();
	        screeningNumTf.setText(""+num);
	   		JOptionPane.showMessageDialog(null,  "Screening sucessfull added");
	   		

        	}
        }
        
    //GEN-LAST:event_jButton1ActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JComponent comp = (JComponent) evt.getSource();
         Window win = SwingUtilities.getWindowAncestor(comp);
         win.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    public Boolean isTimeFree(int startHr, int startMin, String filmName, int theareNum, String date) {
    	int filmLength = 0;
    	int endHr = 0;
    	int endMin = 0;
    	try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cinema?autoReconnect=true&useSSL=false", USER_NAME, PASSWORD);
			st = conn.createStatement();
			String s = "Select Duration from cinema.film where Name = '"+filmName+"';";
			rs = st.executeQuery(s);
			while(rs.next()) {
				filmLength = rs.getInt(1);
			}
			
			endHr = filmLength / 60;
			endMin = filmLength % 60;

			
			endHr = endHr +startHr;
			if(endHr > 23) {
				endHr = endHr - 24;
			}
			endMin = endMin + startMin ;
			if(endMin > 59) {
				endMin = endMin % 60;
				endHr = endHr + (endMin / 60);
				if(endHr > 23) {
					endHr = endHr - 24;
				}
			}
			
			//hr2 & min2 = film end time
			
			String t = "Select Time from screening where Date = '"+date+"' And TheatreNum = "+theareNum+";";
			String time;
			char checkHrChar= '0', checkHr2Char='0';
			char checkMinChar= '0', checkMin2Char='0';
			String checkHrString ="", checkMinString = "";
			int checkHr = 0, checkMin = 0;
			int count = 0; 
			rs = st.executeQuery(t);
			while(rs.next()) {
				time = rs.getString(1);
				
				System.out.println();
				checkHrChar = time.charAt(0);
				checkHr2Char = time.charAt(1);
				checkMinChar = time.charAt(3);
				checkMin2Char = time.charAt(4);
				checkHrString = ""+checkHrChar+""+checkHr2Char;
				checkMinString = ""+checkMinChar+""+checkMin2Char;
				checkHr=	Integer.parseInt(checkHrString);
				checkMin = Integer.parseInt(checkMinString);
			

				
				if(((startHr < checkHr) && (endHr > checkHr)) || (startHr == checkHr) || (endHr == checkHr)){
					count++;
				}
					
				
			}
			
			if(count !=0) {
				return false;
			}
			else
				return true;
		}
		catch (Exception b) {
		JOptionPane.showMessageDialog(null,  "Error");
		return false;
		}finally {
			try {
				st.close();
				rs.close();
				conn.close();
				
			}catch(Exception b) {
	    		JOptionPane.showMessageDialog(null,  "Error Close");

			}
		}
    }
    
    
    public Boolean isNumberFree(int num) {
    	int databaseNum = 0;
    	try {
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cinema?autoReconnect=true&useSSL=false", USER_NAME, PASSWORD);
			st = conn.createStatement();
			String s = "Select Screening_Num from screening;";
			rs = st.executeQuery(s);
			while(rs.next()) {
				databaseNum = rs.getInt(1);
				if(num == databaseNum)
				{
					return false;
				}
			}
			return true;
		}
		catch (Exception b) {
		JOptionPane.showMessageDialog(null,  "Error");
		return false;
		}finally {
			try {
				st.close();
				rs.close();
				conn.close();
				
			}catch(Exception b) {
	    		JOptionPane.showMessageDialog(null,  "Error Close");

			}
		}
    }
    
    private void screeningNumTffocusGained(FocusEvent e) {
    	if(screeningNumTf.getText().equals("Number")) {
    		screeningNumTf.setText("");
    	}
    	
    }
    
    private void screeningNumTffocusLost(FocusEvent e) {
    	if(screeningNumTf.getText().equals("")) {
    		screeningNumTf.setText("Number");
    	}
    	
    }
    
    private void screeningNumTfkeyTyped(KeyEvent e) {
    	char c = e.getKeyChar();
    	if(!(Character.isDigit(c)) || c==KeyEvent.VK_BACK_SPACE || c==KeyEvent.VK_DELETE) {
    		e.consume();
    	}
    	
    }
    
    private void hourskeyTyped(KeyEvent e) {
    	char c = e.getKeyChar();
    	if(!(Character.isDigit(c)) || c==KeyEvent.VK_BACK_SPACE || c==KeyEvent.VK_DELETE) {
    		e.consume();
    	}
    	
    	int y = c-'0';
    	
    	if(y > 2 &&  hours.getText().length() == 0){
    		e.consume();
    	}
    	else if(hours.getText().length() == 1 && hours.getText().charAt(0) =='2' && y > 3) {
    		e.consume();

    	}
    	else
    	hoursSize=hours.getText().length();	
    	
    }
    public Boolean getFreeScreeningNum() {  
    	try {
    	conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/cinema?autoReconnect=true&useSSL=false", USER_NAME, PASSWORD);
		st = conn.createStatement();
			String s = "    	Select Screening_Num from screening where Screening_Num = "+num+";";
			
		
			rs = st.executeQuery(s);
			while(rs.next()) {
					if(num == rs.getInt(1)) {
						return false;
						
				}
			
			

			}
			return true;
		}
		catch (Exception b) {
		JOptionPane.showMessageDialog(null,  "Error");
		return false;
		

		}finally {
			try {
				st.close();
				rs.close();
				conn.close();
				
			}catch(Exception b) {
	    		JOptionPane.showMessageDialog(null,  "Error Close");

			}
		}
    }
    
    public void setNum() {
    	do{
            test = getFreeScreeningNum();
            	if(test==false) {
            		num++;
            	}
    	}while(test!=true);
    }
    
    private void hoursfocusGained(FocusEvent e) {
    	if(hours.getText().equals("--")) {
    		hours.setText("");
    	}
    	
    }
    
    private void hoursfocusLost(FocusEvent e) {
    	if(hours.getText().equals("")) {
    		hours.setText("--");
    	}
    	
    }
    
    private void minkeyTyped(KeyEvent e) {
    	char c = e.getKeyChar();
    	if(!(Character.isDigit(c)) || c==KeyEvent.VK_BACK_SPACE || c==KeyEvent.VK_DELETE) {
    		e.consume();
    	}
    	
    	int y = c-'0';
    	
    	if(y > 5 &&  min.getText().length() == 0){
    		e.consume();
    	}
    	else
    	minSize = min.getText().length();	
    	
    }
    
    private void minfocusGained(FocusEvent e) {
    	if(min.getText().equals("--")) {
    		min.setText("");
    	}
    	
    }
    
    private void minfocusLost(FocusEvent e) {
    	if(min.getText().equals("")) {
    		min.setText("--");
    	}
    	
    }
    
  //  Boolean checkVaildTime(String time) {
    	
  //  }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Screenings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Screenings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Screenings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Screenings.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Screenings frame = new Screenings();
                
                frame.setExtendedState(JFrame.MAXIMIZED_BOTH); 
                
                frame.setVisible(true);  
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton saveButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> theatreComboBox;
    private javax.swing.JComboBox<String> filmComboBox;
    public static com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField screeningNumTf;
    private javax.swing.JTextField hours;
    private JLabel lblHour;
    private JTextField min;
}
